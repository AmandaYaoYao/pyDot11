#!/usr/bin/python2.7

import hmac,hashlib,binascii,sha, re
from pbkdf2 import PBKDF2
from scapy.all import *
from pyDot11 import *

#https://ins1gn1a.com/understanding-wpa-psk-cracking/
#http://etutorials.org/Networking/802.11+security.+wi-fi+protected+access+and+802.11i/Part+II+The+Design+of+Wi-Fi+Security/Chapter+10.+WPA+and+RSN+Key+Hierarchy/Computing+the+Temporal+Keys/

def xPRF512(key, A, B):  
    blen = 64
    i    = 0
    R    = ''
    while i<=((blen*8+159)/160):
        hmacsha1 = hmac.new(key, A + chr(0x00) + B + chr(i), hashlib.sha1)
        i += 1
        R = R + hmacsha1.digest()
    return R[:blen]

ssid = 'wpa2-aes'
passphrase = 'password'
vMac = rdpcap('../PCAPs/EAPOLs/%s.pcap' % ssid) 
one = vMac[1]
two = vMac[2]
ap_mac = binascii.a2b_hex(re.sub(':', '', two[Dot11].addr1))
s_mac = binascii.a2b_hex(re.sub(':', '', one[Dot11].addr1))
anonce = binascii.a2b_hex(re.sub(' ', '', hexstr(str(one), onlyhex = 1)[267:362]))
snonce = binascii.a2b_hex(re.sub(' ', '', hexstr(str(two), onlyhex = 1)[267:362]))

pke = "Pairwise key expansion"  
pmk = PBKDF2(passphrase, ssid, 4096).read(32)
objPMK = pmk.encode('hex')

key_data = min(ap_mac, s_mac) + max(ap_mac, s_mac) + min(anonce, snonce) + max(anonce, snonce)


ptk = xPRF512(pmk, pke, key_data).encode('hex')
kck = ptk[0:16]

#mic = hmac.new(kck, data)
#print "mic: " + mic.hexdigest()  + "\n"

